// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (Intellectus).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dds_TestTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool int2ddsgen (version: 4.1.0).
 */

#include "dds_TestTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <int2cdr/xcdr/external.hpp>
#include <int2cdr/xcdr/optional.hpp>
#include <int2dds/dds/domain/DomainParticipantFactory.hpp>
#include <int2dds/dds/log/Log.hpp>
#include <int2dds/dds/xtypes/common.hpp>
#include <int2dds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <int2dds/dds/xtypes/type_representation/TypeObject.hpp>
#include <int2dds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "dds_Test.hpp"


using namespace intellectus::int2dds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Image_type_identifier(
        TypeIdentifierPair& type_ids_Image)
{

    ReturnCode_t return_code_Image {intellectus::int2dds::dds::RETCODE_OK};
    return_code_Image =
        intellectus::int2dds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Image", type_ids_Image);
    if (intellectus::int2dds::dds::RETCODE_OK != return_code_Image)
    {
        StructTypeFlag struct_flags_Image = TypeObjectUtils::build_struct_type_flag(intellectus::int2dds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Image = "Image";
        intellectus::int2cdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Image;
        intellectus::int2cdr::optional<AppliedAnnotationSeq> ann_custom_Image;
        AppliedAnnotationSeq tmp_ann_custom_Image;
        intellectus::int2cdr::optional<AppliedVerbatimAnnotation> verbatim_Image;
        if (!tmp_ann_custom_Image.empty())
        {
            ann_custom_Image = tmp_ann_custom_Image;
        }

        CompleteTypeDetail detail_Image = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Image, ann_custom_Image, type_name_Image.to_string());
        CompleteStructHeader header_Image;
        header_Image = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Image);
        CompleteStructMemberSeq member_seq_Image;
        {
            TypeIdentifierPair type_ids_frame;
            ReturnCode_t return_code_frame {intellectus::int2dds::dds::RETCODE_OK};
            return_code_frame =
                intellectus::int2dds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_byte_unbounded", type_ids_frame);

            if (intellectus::int2dds::dds::RETCODE_OK != return_code_frame)
            {
                return_code_frame =
                    intellectus::int2dds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_frame);

                if (intellectus::int2dds::dds::RETCODE_OK != return_code_frame)
                {
                    INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_byte_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_byte_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_frame, element_identifier_anonymous_sequence_byte_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_byte_unbounded_ec)
                {
                    INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_byte_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_frame.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_byte_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_byte_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_byte_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_byte_unbounded, element_flags_anonymous_sequence_byte_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_byte_unbounded, bound,
                                intellectus::int2cdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_byte_unbounded));
                    if (intellectus::int2dds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_byte_unbounded", type_ids_frame))
                    {
                        INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_byte_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_frame = TypeObjectUtils::build_struct_member_flag(intellectus::int2dds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_frame = 0x00000000;
            bool common_frame_ec {false};
            CommonStructMember common_frame {TypeObjectUtils::build_common_struct_member(member_id_frame, member_flags_frame, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_frame, common_frame_ec))};
            if (!common_frame_ec)
            {
                INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure frame member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_frame = "frame";
            intellectus::int2cdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_frame;
            ann_custom_Image.reset();
            CompleteMemberDetail detail_frame = TypeObjectUtils::build_complete_member_detail(name_frame, member_ann_builtin_frame, ann_custom_Image);
            CompleteStructMember member_frame = TypeObjectUtils::build_complete_struct_member(common_frame, detail_frame);
            TypeObjectUtils::add_complete_struct_member(member_seq_Image, member_frame);
        }
        {
            TypeIdentifierPair type_ids_frame_index;
            ReturnCode_t return_code_frame_index {intellectus::int2dds::dds::RETCODE_OK};
            return_code_frame_index =
                intellectus::int2dds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_frame_index);

            if (intellectus::int2dds::dds::RETCODE_OK != return_code_frame_index)
            {
                INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "frame_index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_frame_index = TypeObjectUtils::build_struct_member_flag(intellectus::int2dds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_frame_index = 0x00000001;
            bool common_frame_index_ec {false};
            CommonStructMember common_frame_index {TypeObjectUtils::build_common_struct_member(member_id_frame_index, member_flags_frame_index, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_frame_index, common_frame_index_ec))};
            if (!common_frame_index_ec)
            {
                INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure frame_index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_frame_index = "frame_index";
            intellectus::int2cdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_frame_index;
            ann_custom_Image.reset();
            CompleteMemberDetail detail_frame_index = TypeObjectUtils::build_complete_member_detail(name_frame_index, member_ann_builtin_frame_index, ann_custom_Image);
            CompleteStructMember member_frame_index = TypeObjectUtils::build_complete_struct_member(common_frame_index, detail_frame_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_Image, member_frame_index);
        }
        {
            TypeIdentifierPair type_ids_size;
            ReturnCode_t return_code_size {intellectus::int2dds::dds::RETCODE_OK};
            return_code_size =
                intellectus::int2dds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_size);

            if (intellectus::int2dds::dds::RETCODE_OK != return_code_size)
            {
                INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "size Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_size = TypeObjectUtils::build_struct_member_flag(intellectus::int2dds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_size = 0x00000002;
            bool common_size_ec {false};
            CommonStructMember common_size {TypeObjectUtils::build_common_struct_member(member_id_size, member_flags_size, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_size, common_size_ec))};
            if (!common_size_ec)
            {
                INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure size member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_size = "size";
            intellectus::int2cdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_size;
            ann_custom_Image.reset();
            CompleteMemberDetail detail_size = TypeObjectUtils::build_complete_member_detail(name_size, member_ann_builtin_size, ann_custom_Image);
            CompleteStructMember member_size = TypeObjectUtils::build_complete_struct_member(common_size, detail_size);
            TypeObjectUtils::add_complete_struct_member(member_seq_Image, member_size);
        }
        {
            TypeIdentifierPair type_ids_format;
            ReturnCode_t return_code_format {intellectus::int2dds::dds::RETCODE_OK};
            return_code_format =
                intellectus::int2dds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_format);

            if (intellectus::int2dds::dds::RETCODE_OK != return_code_format)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (intellectus::int2dds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_format))
                    {
                        INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_format = TypeObjectUtils::build_struct_member_flag(intellectus::int2dds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_format = 0x00000003;
            bool common_format_ec {false};
            CommonStructMember common_format {TypeObjectUtils::build_common_struct_member(member_id_format, member_flags_format, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_format, common_format_ec))};
            if (!common_format_ec)
            {
                INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure format member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_format = "format";
            intellectus::int2cdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_format;
            ann_custom_Image.reset();
            CompleteMemberDetail detail_format = TypeObjectUtils::build_complete_member_detail(name_format, member_ann_builtin_format, ann_custom_Image);
            CompleteStructMember member_format = TypeObjectUtils::build_complete_struct_member(common_format, detail_format);
            TypeObjectUtils::add_complete_struct_member(member_seq_Image, member_format);
        }
        CompleteStructType struct_type_Image = TypeObjectUtils::build_complete_struct_type(struct_flags_Image, header_Image, member_seq_Image);
        if (intellectus::int2dds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Image, type_name_Image.to_string(), type_ids_Image))
        {
            INTELLECTUS_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Image already registered in TypeObjectRegistry for a different type.");
        }
    }
}

