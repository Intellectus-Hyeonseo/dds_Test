// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (Intellectus).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dds_TestPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool int2ddsgen (version: 4.1.0).
 */

#include "dds_TestPubSubTypes.hpp"

#include <int2dds/dds/log/Log.hpp>
#include <int2dds/rtps/common/CdrSerialization.hpp>

#include "dds_TestCdrAux.hpp"
#include "dds_TestTypeObjectSupport.hpp"

using SerializedPayload_t = intellectus::int2dds::rtps::SerializedPayload_t;
using InstanceHandle_t = intellectus::int2dds::rtps::InstanceHandle_t;
using DataRepresentationId_t = intellectus::int2dds::dds::DataRepresentationId_t;

ImagePubSubType::ImagePubSubType()
{
    set_name("Image");
    uint32_t type_size = Image_max_cdr_typesize;
    type_size += static_cast<uint32_t>(intellectus::int2cdr::Cdr::alignment(type_size, 4)); /* possible submessage alignment */
    max_serialized_type_size = type_size + 4; /*encapsulation*/
    is_compute_key_provided = false;
    uint32_t key_length = Image_max_key_cdr_typesize > 16 ? Image_max_key_cdr_typesize : 16;
    key_buffer_ = reinterpret_cast<unsigned char*>(malloc(key_length));
    memset(key_buffer_, 0, key_length);
}

ImagePubSubType::~ImagePubSubType()
{
    if (key_buffer_ != nullptr)
    {
        free(key_buffer_);
    }
}

bool ImagePubSubType::serialize(
        const void* const data,
        SerializedPayload_t& payload,
        DataRepresentationId_t data_representation)
{
    const Image* p_type = static_cast<const Image*>(data);

    // Object that manages the raw buffer.
    intellectus::int2cdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload.data), payload.max_size);
    // Object that serializes the data.
    intellectus::int2cdr::Cdr ser(fastbuffer, intellectus::int2cdr::Cdr::DEFAULT_ENDIAN,
            data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?
            intellectus::int2cdr::CdrVersion::XCDRv1 : intellectus::int2cdr::CdrVersion::XCDRv2);
    payload.encapsulation = ser.endianness() == intellectus::int2cdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    ser.set_encoding_flag(
        data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?
        intellectus::int2cdr::EncodingAlgorithmFlag::PLAIN_CDR  :
        intellectus::int2cdr::EncodingAlgorithmFlag::DELIMIT_CDR2);

    try
    {
        // Serialize encapsulation
        ser.serialize_encapsulation();
        // Serialize the object.
        ser << *p_type;
        ser.set_dds_cdr_options({0,0});
    }
    catch (intellectus::int2cdr::exception::Exception& /*exception*/)
    {
        return false;
    }

    // Get the serialized length
    payload.length = static_cast<uint32_t>(ser.get_serialized_data_length());
    return true;
}

bool ImagePubSubType::deserialize(
        SerializedPayload_t& payload,
        void* data)
{
    try
    {
        // Convert DATA to pointer of your type
        Image* p_type = static_cast<Image*>(data);

        // Object that manages the raw buffer.
        intellectus::int2cdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload.data), payload.length);

        // Object that deserializes the data.
        intellectus::int2cdr::Cdr deser(fastbuffer, intellectus::int2cdr::Cdr::DEFAULT_ENDIAN);

        // Deserialize encapsulation.
        deser.read_encapsulation();
        payload.encapsulation = deser.endianness() == intellectus::int2cdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

        // Deserialize the object.
        deser >> *p_type;
    }
    catch (intellectus::int2cdr::exception::Exception& /*exception*/)
    {
        return false;
    }

    return true;
}

uint32_t ImagePubSubType::calculate_serialized_size(
        const void* const data,
        DataRepresentationId_t data_representation)
{
    try
    {
        intellectus::int2cdr::CdrSizeCalculator calculator(
            data_representation == DataRepresentationId_t::XCDR_DATA_REPRESENTATION ?
            intellectus::int2cdr::CdrVersion::XCDRv1 :intellectus::int2cdr::CdrVersion::XCDRv2);
        size_t current_alignment {0};
        return static_cast<uint32_t>(calculator.calculate_serialized_size(
                    *static_cast<const Image*>(data), current_alignment)) +
                4u /*encapsulation*/;
    }
    catch (intellectus::int2cdr::exception::Exception& /*exception*/)
    {
        return 0;
    }
}

void* ImagePubSubType::create_data()
{
    return reinterpret_cast<void*>(new Image());
}

void ImagePubSubType::delete_data(
        void* data)
{
    delete(reinterpret_cast<Image*>(data));
}

bool ImagePubSubType::compute_key(
        SerializedPayload_t& payload,
        InstanceHandle_t& handle,
        bool force_md5)
{
    if (!is_compute_key_provided)
    {
        return false;
    }

    Image data;
    if (deserialize(payload, static_cast<void*>(&data)))
    {
        return compute_key(static_cast<void*>(&data), handle, force_md5);
    }

    return false;
}

bool ImagePubSubType::compute_key(
        const void* const data,
        InstanceHandle_t& handle,
        bool force_md5)
{
    if (!is_compute_key_provided)
    {
        return false;
    }

    const Image* p_type = static_cast<const Image*>(data);

    // Object that manages the raw buffer.
    intellectus::int2cdr::FastBuffer fastbuffer(reinterpret_cast<char*>(key_buffer_),
            Image_max_key_cdr_typesize);

    // Object that serializes the data.
    intellectus::int2cdr::Cdr ser(fastbuffer, intellectus::int2cdr::Cdr::BIG_ENDIANNESS, intellectus::int2cdr::CdrVersion::XCDRv2);
    ser.set_encoding_flag(intellectus::int2cdr::EncodingAlgorithmFlag::PLAIN_CDR2);
    intellectus::int2cdr::serialize_key(ser, *p_type);
    if (force_md5 || Image_max_key_cdr_typesize > 16)
    {
        md5_.init();
        md5_.update(key_buffer_, static_cast<unsigned int>(ser.get_serialized_data_length()));
        md5_.finalize();
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle.value[i] = md5_.digest[i];
        }
    }
    else
    {
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle.value[i] = key_buffer_[i];
        }
    }
    return true;
}

void ImagePubSubType::register_type_object_representation()
{
    register_Image_type_identifier(type_identifiers_);
}


// Include auxiliary functions like for serializing/deserializing.
#include "dds_TestCdrAux.ipp"
