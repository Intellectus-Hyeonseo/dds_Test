// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (Intellectus).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dds_TestCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool int2ddsgen (version: 4.1.0).
 */

#ifndef INT2_DDS_GENERATED__DDS_TESTCDRAUX_IPP
#define INT2_DDS_GENERATED__DDS_TESTCDRAUX_IPP

#include "dds_TestCdrAux.hpp"

#include <int2cdr/Cdr.h>
#include <int2cdr/CdrSizeCalculator.hpp>


#include <int2cdr/exceptions/BadParamException.h>
using namespace intellectus::int2cdr::exception;

namespace intellectus {
namespace int2cdr {

template<>
Intellectus_user_DllExport size_t calculate_serialized_size(
        intellectus::int2cdr::CdrSizeCalculator& calculator,
        const Image& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    intellectus::int2cdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                intellectus::int2cdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                intellectus::int2cdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                intellectus::int2cdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(intellectus::int2cdr::MemberId(0),
                data.frame(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(intellectus::int2cdr::MemberId(1),
                data.frame_index(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(intellectus::int2cdr::MemberId(2),
                data.size(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(intellectus::int2cdr::MemberId(3),
                data.format(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
Intellectus_user_DllExport void serialize(
        intellectus::int2cdr::Cdr& scdr,
        const Image& data)
{
    intellectus::int2cdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            intellectus::int2cdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            intellectus::int2cdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            intellectus::int2cdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << intellectus::int2cdr::MemberId(0) << data.frame()
        << intellectus::int2cdr::MemberId(1) << data.frame_index()
        << intellectus::int2cdr::MemberId(2) << data.size()
        << intellectus::int2cdr::MemberId(3) << data.format()
;
    scdr.end_serialize_type(current_state);
}

template<>
Intellectus_user_DllExport void deserialize(
        intellectus::int2cdr::Cdr& cdr,
        Image& data)
{
    cdr.deserialize_type(intellectus::int2cdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            intellectus::int2cdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            intellectus::int2cdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](intellectus::int2cdr::Cdr& dcdr, const intellectus::int2cdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.frame();
                                            break;

                                        case 1:
                                                dcdr >> data.frame_index();
                                            break;

                                        case 2:
                                                dcdr >> data.size();
                                            break;

                                        case 3:
                                                dcdr >> data.format();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        intellectus::int2cdr::Cdr& scdr,
        const Image& data)
{

    static_cast<void>(scdr);
    static_cast<void>(data);
                        scdr << data.frame();

                        scdr << data.frame_index();

                        scdr << data.size();

                        scdr << data.format();

}



} // namespace int2cdr
} // namespace intellectus

#endif // INT2_DDS_GENERATED__DDS_TESTCDRAUX_IPP

