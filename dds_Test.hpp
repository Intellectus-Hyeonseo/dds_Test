// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (Intellectus).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dds_Test.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool int2ddsgen (version: 4.1.0).
 */

#ifndef INT2_DDS_GENERATED__DDS_TEST_HPP
#define INT2_DDS_GENERATED__DDS_TEST_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include <int2cdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(INTELLECTUS_USER_DLL_EXPORT)
#define Intellectus_user_DllExport __declspec( dllexport )
#else
#define Intellectus_user_DllExport
#endif  // INTELLECTUS_USER_DLL_EXPORT
#else
#define Intellectus_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(INTELLECTUS_USER_DLL_EXPORT)
#if defined(DDS_TEST_SOURCE)
#define DDS_TEST_DllAPI __declspec( dllexport )
#else
#define DDS_TEST_DllAPI __declspec( dllimport )
#endif // DDS_TEST_SOURCE
#else
#define DDS_TEST_DllAPI
#endif  // INTELLECTUS_USER_DLL_EXPORT
#else
#define DDS_TEST_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure Image defined by the user in the IDL file.
 * @ingroup dds_Test
 */
class Image
{
public:

    /*!
     * @brief Default constructor.
     */
    Intellectus_user_DllExport Image()
    {
    }

    /*!
     * @brief Default destructor.
     */
    Intellectus_user_DllExport ~Image()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Image that will be copied.
     */
    Intellectus_user_DllExport Image(
            const Image& x)
    {
                    m_frame = x.m_frame;

                    m_frame_index = x.m_frame_index;

                    m_size = x.m_size;

                    m_format = x.m_format;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Image that will be copied.
     */
    Intellectus_user_DllExport Image(
            Image&& x) noexcept
    {
        m_frame = std::move(x.m_frame);
        m_frame_index = x.m_frame_index;
        m_size = x.m_size;
        m_format = std::move(x.m_format);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Image that will be copied.
     */
    Intellectus_user_DllExport Image& operator =(
            const Image& x)
    {

                    m_frame = x.m_frame;

                    m_frame_index = x.m_frame_index;

                    m_size = x.m_size;

                    m_format = x.m_format;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Image that will be copied.
     */
    Intellectus_user_DllExport Image& operator =(
            Image&& x) noexcept
    {

        m_frame = std::move(x.m_frame);
        m_frame_index = x.m_frame_index;
        m_size = x.m_size;
        m_format = std::move(x.m_format);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Image object to compare.
     */
    Intellectus_user_DllExport bool operator ==(
            const Image& x) const
    {
        return (m_frame == x.m_frame &&
           m_frame_index == x.m_frame_index &&
           m_size == x.m_size &&
           m_format == x.m_format);
    }

    /*!
     * @brief Comparison operator.
     * @param x Image object to compare.
     */
    Intellectus_user_DllExport bool operator !=(
            const Image& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member frame
     * @param _frame New value to be copied in member frame
     */
    Intellectus_user_DllExport void frame(
            const std::vector<uint8_t>& _frame)
    {
        m_frame = _frame;
    }

    /*!
     * @brief This function moves the value in member frame
     * @param _frame New value to be moved in member frame
     */
    Intellectus_user_DllExport void frame(
            std::vector<uint8_t>&& _frame)
    {
        m_frame = std::move(_frame);
    }

    /*!
     * @brief This function returns a constant reference to member frame
     * @return Constant reference to member frame
     */
    Intellectus_user_DllExport const std::vector<uint8_t>& frame() const
    {
        return m_frame;
    }

    /*!
     * @brief This function returns a reference to member frame
     * @return Reference to member frame
     */
    Intellectus_user_DllExport std::vector<uint8_t>& frame()
    {
        return m_frame;
    }


    /*!
     * @brief This function sets a value in member frame_index
     * @param _frame_index New value for member frame_index
     */
    Intellectus_user_DllExport void frame_index(
            uint32_t _frame_index)
    {
        m_frame_index = _frame_index;
    }

    /*!
     * @brief This function returns the value of member frame_index
     * @return Value of member frame_index
     */
    Intellectus_user_DllExport uint32_t frame_index() const
    {
        return m_frame_index;
    }

    /*!
     * @brief This function returns a reference to member frame_index
     * @return Reference to member frame_index
     */
    Intellectus_user_DllExport uint32_t& frame_index()
    {
        return m_frame_index;
    }


    /*!
     * @brief This function sets a value in member size
     * @param _size New value for member size
     */
    Intellectus_user_DllExport void size(
            uint32_t _size)
    {
        m_size = _size;
    }

    /*!
     * @brief This function returns the value of member size
     * @return Value of member size
     */
    Intellectus_user_DllExport uint32_t size() const
    {
        return m_size;
    }

    /*!
     * @brief This function returns a reference to member size
     * @return Reference to member size
     */
    Intellectus_user_DllExport uint32_t& size()
    {
        return m_size;
    }


    /*!
     * @brief This function copies the value in member format
     * @param _format New value to be copied in member format
     */
    Intellectus_user_DllExport void format(
            const std::string& _format)
    {
        m_format = _format;
    }

    /*!
     * @brief This function moves the value in member format
     * @param _format New value to be moved in member format
     */
    Intellectus_user_DllExport void format(
            std::string&& _format)
    {
        m_format = std::move(_format);
    }

    /*!
     * @brief This function returns a constant reference to member format
     * @return Constant reference to member format
     */
    Intellectus_user_DllExport const std::string& format() const
    {
        return m_format;
    }

    /*!
     * @brief This function returns a reference to member format
     * @return Reference to member format
     */
    Intellectus_user_DllExport std::string& format()
    {
        return m_format;
    }



private:

    std::vector<uint8_t> m_frame;
    uint32_t m_frame_index{0};
    uint32_t m_size{0};
    std::string m_format;

};

#endif // _INT2_DDS_GENERATED_DDS_TEST_HPP_


